import os
import tkinter as tk
from tkinter import filedialog
from PIL import Image, ImageTk, ImageDraw, ImageChops

class ImageMaskApp:
    def __init__(self, root, path):
        self.root = root
        self.path = path
        self.current_image = None
        self.current_image_path = ''
        self.scaled_image = None
        self.points = []

        self.root.state('zoomed')  # Fullscreen window

        # Layout: File List | Image Display | Mask Display
        self.file_listbox = tk.Listbox(root, exportselection=False, width=50)
        self.file_listbox.pack(side=tk.LEFT, fill=tk.Y)
        self.image_canvas = tk.Canvas(root, cursor="cross")
        self.image_canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        self.mask_panel = tk.Label(root)
        self.mask_panel.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)

        self.file_listbox.bind('<Double-1>', self.display_image_and_mask)
        self.image_canvas.bind('<Button-1>', self.add_point)
        self.root.bind('<Button-3>', self.generate_and_save_mask)
        self.root.bind('<KeyPress-1>', self.add_bottom_points_and_complete_mask)

        self.load_files()

    def load_files(self):
        self.file_listbox.delete(0, tk.END)
        files = [f for f in os.listdir(self.path) if os.path.isfile(os.path.join(self.path, f))]
        for file in sorted(files):
            self.file_listbox.insert(tk.END, file)

    def display_image_and_mask(self, event=None):
        selection = self.file_listbox.curselection()
        if not selection:
            return
        filename = self.file_listbox.get(selection[0])
        self.current_image_path = os.path.join(self.path, filename)
        self.current_image = Image.open(self.current_image_path)
        self.scaled_image = self.current_image.resize((int(self.current_image.width * 1.5), int(self.current_image.height * 1.5)), Image.ANTIALIAS)
        self.tk_image = ImageTk.PhotoImage(self.scaled_image)
        self.image_canvas.create_image(0, 0, anchor="nw", image=self.tk_image)
        self.image_canvas.config(scrollregion=(0, 0, self.scaled_image.width, self.scaled_image.height))

        # Display existing mask if available
        mask_path = f"{os.path.splitext(self.current_image_path)[0]}_mask{os.path.splitext(self.current_image_path)[1]}"
        if os.path.exists(mask_path):
            mask = Image.open(mask_path).resize((int(self.current_image.width * .5), int(self.current_image.height * .5)), Image.ANTIALIAS)
            self.tk_mask_image = ImageTk.PhotoImage(mask)
            self.mask_panel.config(image=self.tk_mask_image)
        else:
            self.mask_panel.config(image='')
        self.points.clear()

    def add_point(self, event):
        # Convert canvas click position back to original image scale
        original_x, original_y = int(event.x / 1.5), int(event.y / 1.5)
        self.points.append((original_x, original_y))
        self.draw_points()

    def draw_points(self):
        self.image_canvas.delete('point')
        for point in self.points:
            # Scale points for display
            scaled_point = (point[0] * 1.5, point[1] * 1.5)
            self.image_canvas.create_oval(scaled_point[0]-2, scaled_point[1]-2, scaled_point[0]+2, scaled_point[1]+2, fill='red', outline='red', tags='point')

    def generate_and_save_mask(self, event):
        if not self.points or len(self.points) < 3:
            return
        self.points.append(self.points[0])  # Close the polygon
        self.generate_mask(save=True)
        self.points.clear()

    def add_bottom_points_and_complete_mask(self, event):
        if len(self.points) > 1:
            height = self.current_image.height
            self.points += [(self.points[-1][0], height), (self.points[0][0], height), self.points[0]]
            self.generate_mask(save=True)
            self.points.clear()

    def generate_mask(self, save=False):
        mask = Image.new('L', self.current_image.size, 0)
        ImageDraw.Draw(mask).polygon(self.points, outline=1, fill=255)
        if save:
            # Check if there is an existing mask and merge if necessary
            mask_path = f"{os.path.splitext(self.current_image_path)[0]}_mask{os.path.splitext(self.current_image_path)[1]}"
            if os.path.exists(mask_path):
                existing_mask = Image.open(mask_path).convert('L')
                # Combine the new mask with the existing one
                combined_mask = ImageChops.lighter(existing_mask, mask)
                combined_mask.save(mask_path)
            else:
                mask.save(mask_path)
            # Update the display
            self.display_mask(mask_path)
            # Reload the file list to show the new or updated mask file
            self.load_files()

    def display_mask(self, mask_path):
        mask = Image.open(mask_path).resize((int(self.current_image.width * .5), int(self.current_image.height * .5)), Image.ANTIALIAS)
        self.tk_mask_image = ImageTk.PhotoImage(mask)
        self.mask_panel.config(image=self.tk_mask_image)

if __name__ == '__main__':
    root = tk.Tk()
    app = ImageMaskApp(root, "E:/TF_FAIR/Dataset/freeair_mask/images")
    root.mainloop()


